# -*- mode:org; fill-column:79; -*-

#+title:Programming for the Web with JavaScript
#+subtitle:PennX SD4x:
#+subtitle: Learn how to develop dynamic, interactive, and data-driven web apps using JavaScript.
#+date:2019-6-27 14:48
PennX SD4x: Learn how to develop dynamic, interactive, and data-driven web apps
using JavaScript.
* Introduction
:PROPERTIES:
:unnumbered: t
:END:
** About this Course
- CS Essentials for Software Development "Learn to design efficient high
  quality software"
  - Software Development Fundamentals
  - Data Structures and Software Design
  - Algorithm Design and Analysis
  - Programming for the Web with JavaScript
- Length: 4 weeks
- Effort: 6-8 hours per week
- Level: Intermediate


JavaScript is the programming language of the World Wide Web.

As a professional web software developer, you will not only need to know how to
program in this simple yet powerful language, but you will need to understand
the fundamentals of how data is exchanged on the World Wide Web (WWW) and what
tools and frameworks are available to you for creating robust, interactive web
applications.

This course, part of the {{{cite(CS Essentials for Software Development
Professional Certificate)}}} program, provides an introduction to modern web
development using JavaScript.  In addition to exploring the basics of web page
creation using HTML and CSS, you will learn advanced web page layout and
responsive design tools such as Bootstrap.  You will also learn how browsers
represent a web page data using the Document Object Model (DOM) and how to
develop dynamic, interactive web pages using JavaScript in the browser.  Beyond
fundamental JavaScript syntax and advanced language features such as callbacks,
events, and asynchronous programming, you will work with jQuery, which provides
functionality for simplified DOM manipulation and event handling.

This course will also introduce you to modern web frameworks and
component-based libraries such as React.js for efficiently developing modular
web page components, and D3.js for creating data-driven documents.  We will
also teach you how to represent and exchange data using JavaScript Object
Notation (JSON), and how to access RESTful APIs on the web.

Server-side JavaScript is becoming more prevalent in the industry, with web
frameworks such as Node.js and Express making it simple to create and deploy
complex, data-driven web applications.  This course will prepare you to use
such frameworks and show you how to integrate them with NoSQL databases such as
MongoDB.

** What You Will Learn
- The basics of how the World Wide Web allows browsers to send and retrieve web
  content

- Web browser internals, the Document Object Model (DOM), and jQuery

- How to create dynamic, interactive web pages using JavaScript

- Techniques for creating data-driven websites using modern web technologies

- Client-side JavaScript libraries and frameworks

- Server-side JavaScript application architecture, middleware, HTTP, and
  RESTful API design

** Course Instructors

*** Chris Murphy
- Associate Professor of Practice, School of Engineering and Applied Science
  University of Pennsylvania

- Other Courses taught
  - Data Structures and Software Design


Chris is an Associate Professor of Practice at the School of Engineering and
Applied Science at the University of Pennsylvania.  He received his B.S. in
Computer Engineering from Boston University in 1995, and his M.S. and Ph.D. in
Computer Science in 2006 and 2010, respectively, from Columbia University.  His
research interests include computer science education, software testing, and
open source software development.  Prior to his graduate studies, Chris was a
professional software developer for companies in the United States and United
Kingdom.

*** Swapneel Sheth
- Senior Lecturer, Computer and Information Science University of Pennsylvania


Swapneel Sheth is a Lecturer at the School of Engineering and Applied Science
at the University of Pennsylvania.  He received his B.E. in Computer
Engineering from Sarder Patel College of Engineering, Mumbai University in
2006, and his M.S. and Ph.D. in Computer Science from Columbia University in
2007 and 2013 respectively.  His research interests include Computer Science
Education, Software Engineering, and Privacy.

** Course Syllabus
- Week 1---Web Programming Basics ::

     Web Programming Basics: how web browsers and servers communicate using
     HTTP; creating static web content with HTML and CSS

- Week 2---Using JavaScript to Create Dynamic Web Pages ::

     Using JavaScript to Create Dynamic Web Pages: basics of the JavaScript
     programming language; accessing HTML elements from embedded JavaScript
     using the DOM and jQuery

- Week 3---Client-Side Frameworks for Developing Modular Web Page Components ::

     Client-Side Frameworks for Developing Modular Web Page Components:
     component-based web app development using React; creating data-driven
     documents with D3.js

- Week 4---Building Scalable Web Apps with Server-Side JavaScript ::

     Building Scalable Web Apps with Server-Side JavaScript: generating dynamic
     content on the server using Node.js and Express; storing and retrieving
     data in MongoDB; developing an API for the web

** Getting Started

*** Welcome from the SD4x Team

*** Welcome from the Instructors
Dear Learners,

We are so excited to welcome you to SD4x Programming for the Web with
JavaScript, the fourth and final course of the CS Essentials for Software
Development series.  During our time teaching software engineering and web
programming at Penn Engineering, we have seen rapid and exciting developments
in terms of the tools, platforms, libraries, and technologies that can be used
to create interactive, data-driven web applications using JavaScript.  We have
designed this course to provide you with the foundation that you will need to
enter and keep up with this fast-moving field, and our entire team looks
forward to helping you build up your skill set in web programming.
* Week 1
** Introduction to Week 1
This week we'll start with the basics of web programming by looking at how the
Worldwide Web works.  We'll see how a browser communicates with a server using
HTTP.  And we'll explore the fundamentals of webpage creation using HTML and
CSS.
** Introduction to the Internet and the World Wide Web - Video 1.1
#+cindex:Internet, what it is
- What is the Internet? ::

     #+cindex:network of devices
     #+cindex:media
     Network of machines (servers, clients, routers, switches, etc) connected
     by media (fiber, wifi, etc.) that allows communication among devices.

     #+cindex:graph
     #+cindex:nodes
     #+cindex:edges
     Graph: nodes (devices), edges (connections)

     #+cindex:World Wide Web, what it is
- What is the World-Wide Web? ::

     #+cindex:infrastructure
     World-Wide-Web is not the Internet.  It is an application that operates
     over the Internet.  The Internet provides an infrastructure; the WWW
     utilizes the infrastructure to run an application on which users connect
     and share data.

     #+cindex:email
     Other applications use the Internet as well, i.e. email.

     The WWW application combines many protocols to allow communication and
     transfer data between devices.

     The Web is composed of documents that are logically linked to each other.

     #+cindex:network structure
     #+cindex:nodes
     #+cindex:edges
     The Web follows similar network structure as the Internet.  Web pages link
     to other web pages, forming a graph.  Nodes represent an individual
     document or resource.  Edges represent a link from one document or
     resource to another (directed edges).

     #+cindex:Web addresses
     #+cindex:address, Web
- Web Page Addresses ::

     #+cindex:Uniform Resource Identifier (URI)
     #+cindex:URI
  - Uniform Resource Identifier (URI): alphanumeric string of characters
    used to uniquely identify a web page or resource.

    #+cindex:Uniform Resource Locator (URL)
    #+cindex:URL
    #+cindex:protocol
  - Uniform Resource Locator (URL): type of URI that specifies the location
    on the WWW and the mechanism (protocol) for retrieving it.

  - Example URL: =http://www.example.com/home/index.html?a=12&b=34=

    - =http:= is the protocol.

    - =host name:= =www.example.com/=

    - =domain name:= =example.com=

    - =file path:= =index.html=

    - =query parameters:= =?a=12&b=34=

  - Content Categories ::

       #+cindex:static content
    - Static: same for all users and at all times; appearance may vary based
      upon browser, but content is the same.  Technologies include HTML, CSS.

      #+cindex:dynamic content
    - Dynamic: programmatically generated depending on the user, context,
      configuration, arguments, etc.  Technology is Javascript.

  - Looking Ahead ::

    - How does a browser request a web page or resource?  What
      does it send?  What does it receive?

    - Once the content is received, how does a browser display it?

    - How can you write programs to generate dynamic content in the browser?
** How a Web Browser Works
#+cindex:web browser, what it is
- What is a Web browser? ::

     Software that is used to access and display Web content, and to navigate
     across the Web.

  #+cindex:web browser components
- Main components of a Web browser ::

     #+cindex:engine,rendering
     #+cindex:static content
  - Rendering engine (HTML/CSS): responsible for static content
    presentation, formatting, and layout.

    #+cindex:engine, JavaScript
    #+cindex:dynamic content
  - JavaScript engine: responsible for creating and modifying dynamic content
    and appearance.

- How a Web browser works ::

     #+cindex:HTTP
     Utilizes Hypertext Transfer Protocol (HTTP) to transfer documents.

    #+cindex:client-server model
  - Client-Server Model

    Client <---> Server

    #+cindex:request
    Client sends a =request= to a server

    #+cindex:response
    Server sends back a =response= to the requesting client

    #+cindex:HTTP overview
- HTTP Overview ::

    #+cindex:protocol
  - HTTP is a plain-text, human-readable protocol used for
    exchanging data on the Web

    #+cindex:Berniers-Lee, Tim
  - Initially developed by Tim Berniers-Lee at CERN in 1989

    #+cindex:client-server model
  - Based on client-server model

    #+cindex:request
    - Client sends a =request= for resources, possibly including information
      about the client

      #+cindex:response
    - Server sends a =response=, including header (status information) and
      requested resource configuration, arguments, etc.  Technology is
      Javascript

  #+cindex:request
- Anatomy of an HTTP Request ::

    #+cindex:verb
    #+cindex:argument
  - Verb followed by Argument

      #+cindex:GET
    - =GET= : retrieve resource

      #+cindex:HEAD
    - =HEAD= : retrieve only headers

      #+cindex:POST
    - =POST= : create resource

    #+cindex:protocol
    #+cindex:HTTP/1.1 protocol
  - Protocol (usually HTTP/1.1)

  - Optionally other information

    #+cindex:example HTTP request
  - Example HTTP Request

    #+begin_example
    GET /examples/index.html HTTP/1.1	# REQUEST line: VERB ARGUMENT (URI) HTTP-VERSION
    Host: xxx.edx.org			# REQUEST HEADERS
    User-Agent: Mozilla/4.0
    Accept-Language: en-us
    Content-Length: 9
						# Mandatory blank line
    a=12&b=34				# REQUEST MESSAGE BODY
    #+end_example

  #+cindex:respone
- Anatomy of an HTTP Response ::

    #+cindex:protocol
    #+cindex:status code
  - Protocol and Status Code

      #+cindex:1XX status
    - 1XX - information only

      #+cindex:2XX status
    - 2XX - Sucess

      #+cindex:3XX status
    - 3XX - Client redirect

      #+cindex:4XX status
    - 4XX - Client error

      #+cindex:5XX status
    - 5XX - Server error

  - Most common status codes

      #+cindex:200 OK status
      #+cindex:OK, 200
    - 200 OK - request succeeded, resulting resource will be included in
      message body

      #+cindex:404 NOT FOUND
      #+cindex:NOT FOUND, 404
    - 404 NOT FOUND - requested resource does not exist

      #+cindex:500 SERVER ERROR
      #+cindex:SERVER ERROR, 500
    - 500 SERVER ERROR - Error on the server side in processing request

    #+cindex:header information
  - Header Information re: response and server

  - Blank line

    #+cindex:response body
    #+cindex:body, response
  - Response Body - resource that was requested

    #+cindex:example HTTP response
  - Response Example

    #+begin_example
    HTTP/1.1 200 OK			# RESPONSE LINE
    Date: <date>			# RESPONSE HEADERS
    Server: Apache/1.4
    Last-Modified: <date>
    Connection: close
    Content-Type: text/html
    Content-Length: 228
					# Mandatory blank line
    <!DOCTYPE html><html><head>...	# RESPONSE BODY (Resource)
    #+end_example

** Introduction to HTML
#+cindex:Hyptertext Markup Language (HTML)
#+cindex:HTML
- Hypertext Markup Language ::

     standard used to describe format and structure with which content should
     be displayed on a web page

  #+cindex:Elements
- Elements ::

              Document contains elements

  #+cindex:Tag
- Tag ::

      Each element generally includes a start tag, some content, and an end
      configuration, arguments, etc.  Technology is Javascripttag.

  #+cindex:plain text
- Plain Text ::

                HTML is a plain-text, human-readable language that is used for
                representing content on the Web

 #+cindex:structure
- Structure ::

               HTML specifies how to structure the data, but not how to display
               it.

  #+cindex:display
- Display ::

             The browser chooses how to display the content

  #+cindex:example HTML
- Example ::

             #+begin_example
             <!DOCTYPE html>
             <html>
             	<head>
                		<title>
                                Hello
                            </title>
                	</head>
                    <body>
                    	Hello, World!
                    </body>
             </html>
             #+end_example

*** Important HTML Tags

**** <!DOCTYPE>
#+vindex:<!DOCTYPE>
#+cindex:declaration, HTML5
NOT a tag, but a DECLARATION to the web browser of what version of html the
following document uses.  Must be the first line of a document.

- =<!DOCTYPE html>= declares type HTML5

**** <html>
#+vindex:<html>
After the declaration, HTML pages must start with the =<html>= tag.

  #+cindex:root element
- Root element :: Often referred to as the /root element/ because it can be
                  considered as the root of the tree-like structure of elements
                  in an HTML page.

**** <head>
#+vindex:<head>
Contains information about the document (NOT the content)

#+vindex:<title>
- =<title>= :: title displayed in the browser's title bar
  #+vindex:<link>
- =<link>= :: used to add CSS stylesheets and icons to the page
  #+vindex:<meta>
- =<meta>= :: used to specify metadata like page descriptions and keywords
  #+vindex:<script>
- =<script>= :: used to add JavaScript code to the page

**** <body>
#+vindex:<body>
Appears directly beneath the =<head>= element; contains all web page content
(images, text, etc.).  Usually a single element to a document.

*** How HTTP and HTML are Related
#+cindex:request
#+cindex:respone
When a browser makes a request for a document(e.g., ~hello.html~), the HTML
will be returned in the body of the response and displayed in the browser.

** Environment Setup
#+cindex:environment
1. Text Editor
2. Create new text file
3. Write HTML in text file
4. Save document
5. Open local file in browser
6. View HTML source in the browser

** Basic HTML
*** Important HTML Tags
**** <p>
#+vindex:<p>
- Appears anywhere within the body to represent a paragraph of text expressing
  a single thought.
- Usually displayed vertical space before and after paragraph.
**** <h#>
#+vindex:<h#>
#+cindex:section heading tag
- Referred to as /section heading tags/

- HTML supports 6 heading tags

    #+vindex:<h1>...<h6>
  - <h1> :: used for most important titles

  - <h2> :: used for next important subheader

  - <h3> :: continuing less important header

  - <h4> :: ...

  - <h5> :: ...

  - <h6> :: Lease important header

- Magnitude of importance affects font size that will be displayed.

- Can be used to divide content into readable subsections

- Browser determines font and size depending on magnitude

**** <b>
#+vindex:<b>
#+cindex:bold tag
- indicates that the text should be *bold*

**** <i>
#+vindex:<i>
#+cindex:italicized tag
- indicates that the text should be /italicized/

**** <strong>
#+vindex:<strong>
#+cindex:strong tag
Similar tags are =<strong>=

**** <em>
#+vindex:<em>
#+cindex:emphasized tag
and =<em>=.

**** <hr>
#+vindex:<hr>
#+cindex:horizontal rule tag
- mark a break in content
- represents a more serious shift in content, visually separating content by
  placing a visible line between content

**** <br>
#+vindex:<br>
#+cindex:break tag
- mark a break in content
- represents a single line break
- inserts a blank line

**** <div>
#+vindex:<div>
#+cindex:division tag
- provides additional structure to web page
  #+cindex:block-level container
- block-level container for organized content
- often used for:
  - page headers / footers
  - menu / navigation bar
  - photo galleries
  - ads or outside media

**** <span>
#+vindex:<span>
#+cindex:span tag
- inline container for organized content
- similar to =<div>= but different in the following ways:
  - block-level elements (=<div>=) are designed to contain larger chunks of
    content designed to stand alone as a unit; always starts with a new line;
  - inline-elements (=<span>=) designed to contain smaller pieces of content
    usually within a larger block of content; does not start with a new line;

**** <!-- Comments -->
#+vindex:<!-- Comment -->
#+cindex:comment tag
- text in the HTML that will not be rendered in the browser
- often used for:
  - explaining HTML or leaving notes for other programmers
  - temporarily removing HTML content
*** HTML Symbols and Special Characters
**** &nbsp;
#+vindex:&nbsp;
#+cindex:non-breaking space entity
- non-breaking space; allows for extra white space betwen words

**** &lt;
#+vindex:&lt;
#+cindex:less-than symbol
: <

**** &gt;
#+vindex:&gt;
#+cindex:greater-than symbol
: >

**** &amp;
#+vindex:&amp;
#+cindex:ampersand symbol
: &

**** &copy;
#+vindex:@copy;
#+cindex:copyright symbol
: @

**** &reg;
#+vindex:&reg;
#+cindex:registered symbol
\textregistered

* Concept Index
:PROPERTIES:
:unnumbered: t
:index:    cp
:END:

* Tag Index
:PROPERTIES:
:unnumbered: t
:index:    vr
:END:

* Export Settings                                                  :noexport:
** Texinfo Export Settings
#+texinfo_filename:progwebjs.info
#+texinfo_class: info
#+texinfo_header:
#+texinfo_post_header:
#+texinfo_dir_category:JavaScript
#+texinfo_dir_title:ProgWebJS
#+texinfo_dir_desc:Programming for the web with JavaScript
#+texinfo_printed_title:Programming for the Web with JavaScript

* Macro Definitions                                                :noexport:
#+macro:heading @@texinfo:@heading @@$1
#+macro:subheading @@texinfo:@subheading @@$
#+macro:cite @@texinfo:@cite{@@$1@@texinfo:}@@
* Local Variables                                                  :noexport:
# Local Variables:
# time-stamp-pattern:"8/^\\#\\+date:%:y-%:m-%:d %02H:%02M$"
# End:
